"#version 330 core\n"
"\n"
"struct Light\n"
"{\n"
"	vec3 direction;\n"
"	vec3 position;\n"
"	vec4 color;\n"
"	float linear;\n"
"	float quadratic;\n"
"	float cutOff;\n"
"	float outerCutOff;\n"
"	int type;\n"
"};\n"
"\n"
"in vec3 FragPos;\n"
"\n"
"uniform vec4 vertColor;\n"
"uniform Light light;\n"
"\n"
"out vec4 color;\n"
"\n"
"void main()\n"
"{\n"
"	vec3 ambient;\n"
"	\n"
"	if(light.type == 0)\n"
"		ambient = light.color.xyz * vertColor.xyz;\n"
"	else if(light.type == 1)\n"
"	{\n"
"		float distance = length(light.position - FragPos);\n"
"		float attenuation = 1.f / (1.f + light.linear * distance + light.quadratic * pow(distance, 2));\n"
"			\n"
"		ambient = light.color.xyz * vertColor.xyz * attenuation;\n"
"	}\n"
"	else if(light.type == 2)\n"
"	{\n"
"		vec3 lightDir = normalize(light.position - FragPos); \n"
"		float angleCos = dot(lightDir, normalize(-light.direction));\n"
"		float intensity = clamp((angleCos - light.outerCutOff) / (light.cutOff - light.outerCutOff), 0.f, 1.f);\n"
"		\n"
"		ambient = light.color.xyz * vertColor.xyz * intensity;\n"
"	}\n"
"	\n"
"	color = vertColor * vec4(ambient, 1.f);\n"
"}\n"
